name: DigitalOcean Droplet Management & Cleanup

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        default: 'list'
        type: choice
        options:
        - list
        - cleanup-old
        - cleanup-all-except-current
      days_old:
        description: 'Delete droplets older than X days'
        required: false
        default: '1'

jobs:
  manage-droplets:
    runs-on: ubuntu-latest
    steps:
      - name: List All Droplets
        if: github.event.inputs.action == 'list'
        run: |
          echo "🔍 Scanning DigitalOcean account for all Droplets..."
          
          RESPONSE=$(curl -s -X GET \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${{ secrets.DIGITALOCEAN_TOKEN }}" \
            "https://api.digitalocean.com/v2/droplets?per_page=200")
          
          echo "📊 DROPLET INVENTORY:"
          echo "===================="
          
          if echo "$RESPONSE" | jq -e '.droplets | length > 0' > /dev/null; then
            echo "$RESPONSE" | jq -r '.droplets[] | 
              "🖥️  ID: \(.id)
              📛 Name: \(.name) 
              📊 Status: \(.status)
              🌐 IP: \(.networks.v4[0].ip_address // "No IP")
              📅 Created: \(.created_at)
              💰 Size: \(.size_slug) ($\(.size.price_monthly)/month)
              🏷️  Tags: \(.tags | join(", ") // "None")
              ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"'
            
            TOTAL_COST=$(echo "$RESPONSE" | jq '[.droplets[].size.price_monthly] | add')
            echo ""
            echo "💰 TOTAL MONTHLY COST: \$$TOTAL_COST"
            echo "📈 TOTAL DROPLETS: $(echo "$RESPONSE" | jq '.droplets | length')"
          else
            echo "✅ No droplets found on your account."
          fi

      - name: Cleanup Old Droplets
        if: github.event.inputs.action == 'cleanup-old'
        run: |
          echo "🧹 Cleaning up droplets older than ${{ github.event.inputs.days_old }} days..."
          
          DAYS_AGO=${{ github.event.inputs.days_old }}
          CUTOFF_DATE=$(date -u -d "$DAYS_AGO days ago" +"%Y-%m-%dT%H:%M:%SZ")
          echo "📅 Cutoff date: $CUTOFF_DATE"
          
          RESPONSE=$(curl -s -X GET \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${{ secrets.DIGITALOCEAN_TOKEN }}" \
            "https://api.digitalocean.com/v2/droplets?per_page=200")
          
          OLD_DROPLETS=$(echo "$RESPONSE" | jq --arg cutoff "$CUTOFF_DATE" -r '
            .droplets[] | 
            select(.created_at < $cutoff) | 
            "ID: \(.id) | Name: \(.name) | Created: \(.created_at)"')
          
          if [ -z "$OLD_DROPLETS" ]; then
            echo "✅ No droplets older than $DAYS_AGO days found."
            exit 0
          fi
          
          echo "🗑️  Found old droplets to delete:"
          echo "$OLD_DROPLETS"
          
          OLD_IDS=$(echo "$RESPONSE" | jq --arg cutoff "$CUTOFF_DATE" -r '
            .droplets[] | 
            select(.created_at < $cutoff) | 
            .id')
          
          for id in $OLD_IDS; do
            echo "🗑️  Deleting droplet $id..."
            DELETE_RESPONSE=$(curl -s -w "%{http_code}" -X DELETE \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer ${{ secrets.DIGITALOCEAN_TOKEN }}" \
              "https://api.digitalocean.com/v2/droplets/$id")
            
            if [[ "$DELETE_RESPONSE" == *"204"* ]]; then
              echo "✅ Successfully deleted droplet $id"
            else
              echo "❌ Failed to delete droplet $id: $DELETE_RESPONSE"
            fi
          done

      - name: Cleanup All Except Current
        if: github.event.inputs.action == 'cleanup-all-except-current'
        run: |
          echo "🧹 Cleaning up all droplets except the current one..."
          
          RESPONSE=$(curl -s -X GET \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${{ secrets.DIGITALOCEAN_TOKEN }}" \
            "https://api.digitalocean.com/v2/droplets?per_page=200")
          
          # Keep the most recent private-ai-server
          CURRENT_ID=$(echo "$RESPONSE" | jq -r '
            .droplets[] | 
            select(.name | test("private-ai-server")) | 
            sort_by(.created_at) | 
            reverse | 
            .[0].id')
          
          echo "🔒 Keeping current droplet ID: $CURRENT_ID"
          
          OLD_IDS=$(echo "$RESPONSE" | jq --arg current "$CURRENT_ID" -r '
            .droplets[] | 
            select(.id != ($current | tonumber)) | 
            .id')
          
          if [ -z "$OLD_IDS" ]; then
            echo "✅ No old droplets to delete."
            exit 0
          fi
          
          echo "🗑️  Deleting old droplets..."
          for id in $OLD_IDS; do
            DROPLET_INFO=$(echo "$RESPONSE" | jq -r --arg id "$id" '.droplets[] | select(.id == ($id | tonumber)) | "\(.name) (Created: \(.created_at))"')
            echo "🗑️  Deleting: $DROPLET_INFO"
            
            DELETE_RESPONSE=$(curl -s -w "%{http_code}" -X DELETE \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer ${{ secrets.DIGITALOCEAN_TOKEN }}" \
              "https://api.digitalocean.com/v2/droplets/$id")
            
            if [[ "$DELETE_RESPONSE" == *"204"* ]]; then
              echo "✅ Successfully deleted droplet $id"
            else
              echo "❌ Failed to delete droplet $id: $DELETE_RESPONSE"
            fi
          done 