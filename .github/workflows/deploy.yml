name: Deploy Private AI Stack to DigitalOcean

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      command:
        description: 'Optional command to run on the server'
        required: false
        default: 'deploy'

jobs:
  auto-cleanup:
    runs-on: ubuntu-latest
    steps:
      - name: Auto-Cleanup Old Servers
        run: |
          echo "🧹 AUTO-CLEANUP: Removing old servers to maintain cost efficiency..."
          
          RESPONSE=$(curl -s -X GET \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${{ secrets.DIGITALOCEAN_TOKEN }}" \
            "https://api.digitalocean.com/v2/droplets?per_page=200")
          
          echo "📊 Current Droplets Inventory:"
          if echo "$RESPONSE" | jq -e '.droplets | length > 0' > /dev/null; then
            echo "$RESPONSE" | jq -r '.droplets[] | "🖥️ \(.name) (ID: \(.id)) - \(.status) - $\(.size.price_monthly)/month"'
            
            TOTAL_COST=$(echo "$RESPONSE" | jq '[.droplets[].size.price_monthly] | add // 0')
            TOTAL_COUNT=$(echo "$RESPONSE" | jq '.droplets | length')
            echo "💰 Current Monthly Cost: \$$TOTAL_COST"
            echo "📈 Total Servers: $TOTAL_COUNT"
            
            if [ "$TOTAL_COUNT" -gt 0 ]; then
              echo ""
              echo "🎯 COST OPTIMIZATION: Cleaning up ALL existing servers..."
              echo "💡 New server will be created fresh for maximum reliability"
              
              # Delete ALL existing droplets for cost optimization
              OLD_IDS=$(echo "$RESPONSE" | jq -r '.droplets[].id')
              
              for id in $OLD_IDS; do
                DROPLET_INFO=$(echo "$RESPONSE" | jq -r --arg id "$id" '.droplets[] | select(.id == ($id | tonumber)) | "\(.name)"')
                echo "🗑️ Deleting: $DROPLET_INFO (ID: $id)"
                
                DELETE_RESPONSE=$(curl -s -w "%{http_code}" -X DELETE \
                  -H "Content-Type: application/json" \
                  -H "Authorization: Bearer ${{ secrets.DIGITALOCEAN_TOKEN }}" \
                  "https://api.digitalocean.com/v2/droplets/$id")
                
                if [[ "$DELETE_RESPONSE" == *"204"* ]]; then
                  echo "✅ Successfully deleted $DROPLET_INFO"
                else
                  echo "❌ Failed to delete $DROPLET_INFO: $DELETE_RESPONSE"
                fi
              done
              
              echo "⏳ Waiting 30 seconds for cleanup to complete..."
              sleep 30
            fi
          else
            echo "✅ No existing servers found. Starting fresh deployment."
          fi
          
          echo "🎯 OPTIMIZATION COMPLETE: Ready for fresh deployment!"

  build:
    runs-on: ubuntu-latest
    needs: auto-cleanup
    outputs:
      droplet_ip: ${{ steps.terraform_apply.outputs.droplet_ip }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0
          terraform_wrapper: false

      - name: Deploy Fresh Infrastructure
        id: terraform_apply
        run: |
          cd terraform
          
          echo "🚀 DEPLOYING FRESH PRIVATE AI INFRASTRUCTURE..."
          terraform init
          
          # Apply new infrastructure (no destroy needed, cleanup job handled it)
          echo "🏗️ Creating optimized single-server deployment..."
          terraform apply -auto-approve -var="do_token=${{ secrets.DIGITALOCEAN_TOKEN }}"
          
          DROPLET_IP=$(terraform output -json | jq -r '.droplet_ip_address.value')
          echo "droplet_ip=$DROPLET_IP" >> $GITHUB_OUTPUT
          
          echo "✅ Fresh server deployed at: $DROPLET_IP"

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Wait for SSH to be available
        run: |
          echo "⏳ Waiting for fresh server to boot up..."
          sleep 60

      - name: Install Docker Engine and Compose (Robust Method)
        uses: appleboy/ssh-action@master
        with:
          host: ${{ needs.build.outputs.droplet_ip }}
          username: root
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -e  # Exit on any error
            export DEBIAN_FRONTEND=noninteractive
            
            echo "=== PHASE 1: System Update ==="
            apt-get update
            apt-get upgrade -y
            
            echo "=== PHASE 2: Install Prerequisites ==="
            apt-get install -y \
                ca-certificates \
                curl \
                gnupg \
                lsb-release \
                software-properties-common \
                apt-transport-https
            
            echo "=== PHASE 3: Add Docker GPG Key ==="
            install -m 0755 -d /etc/apt/keyrings
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
            chmod a+r /etc/apt/keyrings/docker.asc
            
            echo "=== PHASE 4: Add Docker Repository ==="
            echo \
              "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
              $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
              tee /etc/apt/sources.list.d/docker.list > /dev/null
            
            echo "=== PHASE 5: Update Package Index ==="
            apt-get update
            
            echo "=== PHASE 6: Install Docker Packages ==="
            apt-get install -y \
                docker-ce \
                docker-ce-cli \
                containerd.io \
                docker-buildx-plugin \
                docker-compose-plugin
            
            echo "=== PHASE 7: Start and Enable Docker ==="
            systemctl start docker
            systemctl enable docker
            
            echo "=== PHASE 8: Verify Installation ==="
            docker --version
            docker compose version
            
            echo "=== DOCKER INSTALLATION SUCCESSFUL ==="

      - name: Checkout code on Droplet
        uses: appleboy/ssh-action@master
        with:
          host: ${{ needs.build.outputs.droplet_ip }}
          username: root
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -e  # Exit on any error
            
            echo "=== Installing Git ==="
            export DEBIAN_FRONTEND=noninteractive
            apt-get install -y git
            
            echo "=== Cloning Repository ==="
            if [ -d "/root/private-ai" ]; then
                rm -rf /root/private-ai
            fi
            GIT_SSH_COMMAND="ssh -o StrictHostKeyChecking=no" git clone https://github.com/${{ github.repository }}.git /root/private-ai
            
            echo "=== Repository cloned successfully ==="

      - name: Deploy Complete AI Stack with Auto-Import
        uses: appleboy/ssh-action@master
        with:
          host: ${{ needs.build.outputs.droplet_ip }}
          username: root
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -e  # Exit on any error
            
            cd /root/private-ai
            
            echo "=== Creating Environment Configuration ==="
            echo "N8N_HOST=${{ needs.build.outputs.droplet_ip }}" > .env
            echo "Created .env file with N8N_HOST=${{ needs.build.outputs.droplet_ip }}"
            
            echo "=== Setting up Data Directories ==="
            mkdir -p n8n_data ollama_data chroma_data
            chown -R 1000:1000 n8n_data
            echo "Data directories created with correct permissions"

            echo "=== Starting Docker Services ==="
            docker compose up -d
            
            echo "=== Waiting for Services to Initialize ==="
            sleep 45
            
            echo "=== Verifying Services Status ==="
            docker compose ps
            
            echo "=== AUTO-IMPORTING N8N WORKFLOWS ==="
            if [ -d "n8n_workflows" ]; then
              echo "📁 Found workflows directory. Setting up auto-import..."
              mkdir -p n8n_data/.n8n/workflows
              cp n8n_workflows/*.json n8n_data/.n8n/workflows/
              chown -R 1000:1000 n8n_data/.n8n/workflows
              echo "✅ Workflows copied successfully"
              
              echo "🔄 Restarting n8n to load workflows..."
              docker compose restart n8n
              sleep 20
              echo "✅ n8n restarted with workflows loaded"
            else
              echo "⚠️ No n8n_workflows directory found"
            fi
            
            echo "=== AUTO-INSTALLING AI MODEL ==="
            echo "🤖 Downloading Llama3 model in background..."
            nohup docker exec ollama_service ollama pull llama3:8b > /tmp/llama_pull.log 2>&1 &
            
            echo ""
            echo "🎉 ===== PRIVATE AI DEPLOYMENT COMPLETE ===== 🎉"
            echo ""
            echo "🌐 Your Private AI is now accessible at:"
            echo "   📊 n8n Interface: http://${{ needs.build.outputs.droplet_ip }}:5678"
            echo "   🧠 ChromaDB API: http://${{ needs.build.outputs.droplet_ip }}:8000"
            echo "   🤖 Ollama API: http://${{ needs.build.outputs.droplet_ip }}:11434"
            echo ""
            echo "✅ Auto-imported workflows:"
            echo "   📄 Document Ingestion Workflow"
            echo "   💬 Q&A Chat Workflow"
            echo ""
            echo "🤖 AI Model: Llama3-8B installing in background"
            echo "💰 Monthly Cost: ~$24 (single optimized server)"
            echo "🔒 100% Private & Secure"
            echo ""
            echo "🚀 Ready to use! No manual setup required."

      - name: Final Status Report
        run: |
          echo ""
          echo "🎯 ===== AUTOMATION COMPLETE ===== 🎯"
          echo ""
          echo "✅ What was automated:"
          echo "   🧹 Old servers automatically cleaned up"
          echo "   🏗️ Fresh server deployed"
          echo "   🐳 Docker stack installed"
          echo "   🔄 All services started"
          echo "   📁 Workflows auto-imported"
          echo "   🤖 AI model downloading"
          echo ""
          echo "💰 Cost Optimization:"
          echo "   • Maintains exactly 1 server"
          echo "   • ~$24/month total cost"
          echo "   • Maximum performance per dollar"
          echo ""
          echo "🎉 Your Private AI is ready!"
          echo "👉 Access: http://${{ needs.build.outputs.droplet_ip }}:5678"
