name: Deploy Private AI Stack to DigitalOcean

on:
  push:
    branches:
      - main
    paths:
      # Only trigger on infrastructure or core application changes
      - 'terraform/**'
      - 'docker-compose.yml'
      - 'n8n_workflows/**'
      - '.github/workflows/**'
      # Ignore documentation changes
      - '!README.md'
      - '!*.md'
      - '!docs/**'
      - '!client-interface.html'
      - '!cost-analysis.md'
      - '!wiki/**'
  workflow_dispatch:
    inputs:
      command:
        description: 'Action to perform'
        required: true
        default: 'deploy'
        type: choice
        options:
          - deploy
          - restart-services
          - update-workflows
          - cleanup-all
      force_rebuild:
        description: 'Force complete rebuild (destroys server)'
        required: false
        default: false
        type: boolean

jobs:
  check-action:
    runs-on: ubuntu-latest
    outputs:
      action: ${{ steps.determine.outputs.action }}
      skip_cleanup: ${{ steps.determine.outputs.skip_cleanup }}
    steps:
      - name: Determine deployment action
        id: determine
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "action=${{ github.event.inputs.command }}" >> $GITHUB_OUTPUT
            if [[ "${{ github.event.inputs.force_rebuild }}" == "true" || "${{ github.event.inputs.command }}" == "cleanup-all" ]]; then
              echo "skip_cleanup=false" >> $GITHUB_OUTPUT
            else
              echo "skip_cleanup=true" >> $GITHUB_OUTPUT
            fi
          else
            # Check what files were changed
            echo "action=smart-deploy" >> $GITHUB_OUTPUT
            echo "skip_cleanup=true" >> $GITHUB_OUTPUT
          fi

  conditional-cleanup:
    runs-on: ubuntu-latest
    needs: check-action
    if: needs.check-action.outputs.skip_cleanup == 'false'
    steps:
      - name: Auto-Cleanup Old Servers
        run: |
          echo "🧹 CLEANUP TRIGGERED: Removing existing servers..."
          
          RESPONSE=$(curl -s -X GET \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${{ secrets.DIGITALOCEAN_TOKEN }}" \
            "https://api.digitalocean.com/v2/droplets?per_page=200")
          
          echo "📊 Current Droplets:"
          if echo "$RESPONSE" | jq -e '.droplets | length > 0' > /dev/null; then
            echo "$RESPONSE" | jq -r '.droplets[] | "🖥️ \(.name) (ID: \(.id)) - \(.status)"'
            
            OLD_IDS=$(echo "$RESPONSE" | jq -r '.droplets[].id')
            for id in $OLD_IDS; do
              echo "🗑️ Deleting droplet ID: $id"
              curl -s -X DELETE \
                -H "Authorization: Bearer ${{ secrets.DIGITALOCEAN_TOKEN }}" \
                "https://api.digitalocean.com/v2/droplets/$id"
            done
            
            echo "⏳ Waiting for cleanup..."
            sleep 30
          else
            echo "✅ No servers to clean up"
          fi

  smart-deploy:
    runs-on: ubuntu-latest
    needs: [check-action, conditional-cleanup]
    if: always() && (needs.conditional-cleanup.result == 'success' || needs.conditional-cleanup.result == 'skipped')
    outputs:
      droplet_ip: ${{ steps.get_or_create.outputs.droplet_ip }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0
          terraform_wrapper: false

      - name: Get or Create Infrastructure
        id: get_or_create
        run: |
          cd terraform
          
          # Check if we need to create new infrastructure
          if [[ "${{ needs.check-action.outputs.action }}" == "cleanup-all" || "${{ needs.check-action.outputs.skip_cleanup }}" == "false" ]]; then
            echo "🏗️ Creating fresh infrastructure..."
            terraform init
            terraform apply -auto-approve -var="do_token=${{ secrets.DIGITALOCEAN_TOKEN }}"
            DROPLET_IP=$(terraform output -json | jq -r '.droplet_ip_address.value')
          else
            echo "🔍 Checking for existing server..."
            RESPONSE=$(curl -s -X GET \
              -H "Authorization: Bearer ${{ secrets.DIGITALOCEAN_TOKEN }}" \
              "https://api.digitalocean.com/v2/droplets")
            
            EXISTING_IP=$(echo "$RESPONSE" | jq -r '.droplets[] | select(.name | contains("private-ai")) | .networks.v4[] | select(.type=="public") | .ip_address' | head -n1)
            
            if [[ "$EXISTING_IP" != "null" && "$EXISTING_IP" != "" ]]; then
              echo "✅ Using existing server: $EXISTING_IP"
              DROPLET_IP="$EXISTING_IP"
            else
              echo "🏗️ No existing server found, creating new one..."
              terraform init
              terraform apply -auto-approve -var="do_token=${{ secrets.DIGITALOCEAN_TOKEN }}"
              DROPLET_IP=$(terraform output -json | jq -r '.droplet_ip_address.value')
            fi
          fi
          
          echo "droplet_ip=$DROPLET_IP" >> $GITHUB_OUTPUT
          echo "🎯 Server IP: $DROPLET_IP"

  deploy:
    runs-on: ubuntu-latest
    needs: [check-action, smart-deploy]
    steps:
      - name: Wait for SSH availability
        run: |
          echo "⏳ Ensuring SSH is ready..."
          for i in {1..10}; do
            if ssh-keyscan -H ${{ needs.smart-deploy.outputs.droplet_ip }} > /dev/null 2>&1; then
              echo "✅ SSH is ready"
              break
            fi
            echo "Waiting... ($i/10)"
            sleep 10
          done

      - name: Deploy or Update Services
        uses: appleboy/ssh-action@master
        with:
          host: ${{ needs.smart-deploy.outputs.droplet_ip }}
          username: root
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -e
            
            # Install Docker if not present
            if ! command -v docker &> /dev/null; then
              echo "🐳 Installing Docker..."
              curl -fsSL https://get.docker.com -o get-docker.sh
              sh get-docker.sh
              systemctl start docker
              systemctl enable docker
            fi
            
            # Clone or update repository
            if [ -d "/root/private-ai" ]; then
              echo "🔄 Updating existing deployment..."
              cd /root/private-ai
              git pull origin main
            else
              echo "📦 Fresh deployment..."
              git clone https://github.com/${{ github.repository }}.git /root/private-ai
              cd /root/private-ai
            fi
            
            # Set environment
            echo "N8N_HOST=${{ needs.smart-deploy.outputs.droplet_ip }}" > .env
            
            # Deploy services based on action
            case "${{ needs.check-action.outputs.action }}" in
              "restart-services")
                echo "🔄 Restarting services..."
                docker compose restart
                ;;
              "update-workflows")
                echo "📋 Updating n8n workflows..."
                # Copy workflows and restart n8n
                docker compose cp n8n_workflows/. n8n_service:/home/node/.n8n/workflows/
                docker compose restart n8n
                ;;
              *)
                echo "🚀 Full deployment..."
                docker compose down --remove-orphans || true
                docker compose up -d
                
                echo "⏳ Waiting for services..."
                sleep 60
                
                # Auto-import workflows
                if [ -d "n8n_workflows" ]; then
                  echo "📋 Importing n8n workflows..."
                  docker compose exec -T n8n n8n import:workflow --input=/home/node/.n8n/workflows/ || true
                fi
                
                # Install Llama3 model
                echo "🤖 Installing Mistral model..."
                docker compose exec -d ollama ollama pull mistral
                
                # Health checks
                echo "🔍 Running health checks..."
                for i in {1..5}; do
                  if curl -s http://localhost:11434/api/generate -d '{"model":"mistral","prompt":"test"}' > /dev/null; then
                    echo "✅ Ollama is healthy"
                    break
                  fi
                  echo "Waiting for Ollama... ($i/5)"
                  sleep 10
                done
                
                for i in {1..5}; do
                  if curl -s http://localhost:8000/api/v1/collections > /dev/null; then
                    echo "✅ ChromaDB is healthy"
                    break
                  fi
                  echo "Waiting for ChromaDB... ($i/5)"
                  sleep 10
                done
                ;;
            esac
            
            echo "✅ Deployment completed successfully!"

  summary:
    runs-on: ubuntu-latest
    needs: [check-action, smart-deploy, deploy]
    if: always()
    steps:
      - name: Deployment Summary
        run: |
          echo "## 🎯 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "**Action:** ${{ needs.check-action.outputs.action }}" >> $GITHUB_STEP_SUMMARY
          echo "**Server IP:** ${{ needs.smart-deploy.outputs.droplet_ip }}" >> $GITHUB_STEP_SUMMARY
          echo "**Services:**" >> $GITHUB_STEP_SUMMARY
          echo "- 📊 n8n: http://${{ needs.smart-deploy.outputs.droplet_ip }}:5678" >> $GITHUB_STEP_SUMMARY
          echo "- 🤖 Ollama: http://${{ needs.smart-deploy.outputs.droplet_ip }}:11434" >> $GITHUB_STEP_SUMMARY
          echo "- 📊 ChromaDB: http://${{ needs.smart-deploy.outputs.droplet_ip }}:8000" >> $GITHUB_STEP_SUMMARY
          
          # Check service status
          echo "**Service Status:**" >> $GITHUB_STEP_SUMMARY
          if curl -s http://${{ needs.smart-deploy.outputs.droplet_ip }}:11434/api/generate -d '{"model":"mistral","prompt":"test"}' > /dev/null; then
            echo "✅ Ollama: Running" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Ollama: Not responding" >> $GITHUB_STEP_SUMMARY
          fi
          
          if curl -s http://${{ needs.smart-deploy.outputs.droplet_ip }}:8000/api/v1/collections > /dev/null; then
            echo "✅ ChromaDB: Running" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ ChromaDB: Not responding" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ needs.check-action.outputs.skip_cleanup }}" == "true" ]]; then
            echo "💡 **Server preserved** - no cleanup performed" >> $GITHUB_STEP_SUMMARY
          else
            echo "🧹 **Fresh deployment** - old servers cleaned up" >> $GITHUB_STEP_SUMMARY
          fi
