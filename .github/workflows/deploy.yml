name: Deploy Private AI Stack to DigitalOcean

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      command:
        description: 'Optional command to run on the server'
        required: false
        default: 'deploy'

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      droplet_ip: ${{ steps.terraform_apply.outputs.droplet_ip }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0
          terraform_wrapper: false

      - name: Authenticate to DigitalOcean & Run Terraform
        id: terraform_apply
        run: |
          cd terraform
          
          echo "Destroying existing infrastructure first..."
          terraform init
          terraform destroy -auto-approve -var="do_token=${{ secrets.DIGITALOCEAN_TOKEN }}" || echo "No existing infrastructure to destroy."

          echo "Applying new infrastructure..."
          terraform apply -auto-approve -var="do_token=${{ secrets.DIGITALOCEAN_TOKEN }}"
          
          DROPLET_IP=$(terraform output -json | jq -r '.droplet_ip_address.value')
          echo "droplet_ip=$DROPLET_IP" >> $GITHUB_OUTPUT

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Wait for SSH to be available
        run: |
          echo "Waiting for 60 seconds for the server to boot up..."
          sleep 60

      - name: Install Docker Engine and Compose
        uses: appleboy/ssh-action@master
        with:
          host: ${{ needs.build.outputs.droplet_ip }}
          username: root
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            export DEBIAN_FRONTEND=noninteractive
            # Add Docker's official GPG key:
            apt-get update
            apt-get install -y ca-certificates curl
            install -m 0755 -d /etc/apt/keyrings
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
            chmod a+r /etc/apt/keyrings/docker.asc

            # Add the repository to Apt sources:
            echo \
              "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
              $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
              tee /etc/apt/sources.list.d/docker.list > /dev/null
            apt-get update

            echo "Installing Docker packages..."
            apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

            echo "Verifying installation..."
            docker --version
            docker compose version
            echo "Docker and Docker Compose installed successfully."

      - name: Save Droplet IP as artifact
        run: |
          echo ${{ needs.build.outputs.droplet_ip }} > droplet_ip.txt
      - uses: actions/upload-artifact@v4
        with:
          name: droplet-ip
          path: droplet_ip.txt

      - name: Checkout code on Droplet
        uses: appleboy/ssh-action@master
        with:
          host: ${{ needs.build.outputs.droplet_ip }}
          username: root
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Reload shell to ensure all binaries are in PATH
            source /root/.bashrc

            export DEBIAN_FRONTEND=noninteractive
            apt-get install -y git
            GIT_SSH_COMMAND="ssh -o StrictHostKeyChecking=no" git clone https://github.com/${{ github.repository }}.git /root/private-ai
            cd /root/private-ai

      - name: Deploy Docker Stack on Droplet
        uses: appleboy/ssh-action@master
        with:
          host: ${{ needs.build.outputs.droplet_ip }}
          username: root
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Reload shell to ensure Docker is in PATH
            source /root/.bashrc

            cd /root/private-ai
            
            # Create .env file for Docker Compose
            echo "N8N_HOST=${{ needs.build.outputs.droplet_ip }}" > .env
            echo "Created .env file with N8N_HOST"
            
            # Create data directory and set correct permissions for n8n
            mkdir -p n8n_data
            chown -R 1000:1000 n8n_data
            echo "Set permissions for n8n data directory"

            if [ "${{ github.event_name }}" = "push" ] || [ "${{ github.event.inputs.command }}" = "deploy" ]; then
              echo "Starting docker services..."
              docker compose up -d
              
              echo "Waiting for services to start..."
              sleep 30

              echo "Pulling Llama3 model in Ollama..."
              docker exec ollama_service ollama pull llama3:8b
              echo "Deployment complete."
            else
              echo "Executing custom command: ${{ github.event.inputs.command }}"
              docker compose ${{ github.event.inputs.command }}
            fi
